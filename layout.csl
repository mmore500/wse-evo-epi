// Color map
//
//  ID var           ID var  ID var                ID var
//   0 channel        9      18                    27 reserved (memcpy)
//   1               10      19                    28 reserved (memcpy)
//   2               11      20                    29 reserved
//   3               12      21 reserved (memcpy)  30 reserved (memcpy)
//   4               13      22 reserved (memcpy)  31 reserved
//   5               14      23 reserved (memcpy)  32
//   6               15      24                    33
//   7               16      25                    34
//   8               17      26                    35

// See task maps in send.csl and recv.csl

// Colors
const channel: color = @get_color(0);

const memcpy = @import_module("<memcpy/get_params>", .{
  .width = 4,
  .height = 3,
  });

layout {
  @set_rectangle(4, 3);

  const memcpy_params_0 = memcpy.get_params(0);
  const memcpy_params_1 = memcpy.get_params(1);
  const memcpy_params_2 = memcpy.get_params(2);
  const memcpy_params_3 = memcpy.get_params(3);

  // The core has 3-by-3 rectangle of PEs.
  // Out of the nine PEs, the PE in the center (PE #1,1) will send four
  // control wavelets to the PE's four adjacent neighbors.  These four
  // adjacent numbers are programmed to receive the control wavelets, whereas
  // all other PEs (i.e. the PEs at the corners of the rectangle) are
  // programmed to contain no instructions or routes.

  const payload_size: u16 = 8;

  for (@range(u32, 3)) |y| {
    @set_tile_code(0, y, "send.csl", .{
      .memcpy_params = memcpy_params_0,
      .ctrl_color = channel,
      .payload_size = payload_size,
      .collect_count = 3,
    });
    @set_tile_code(1, y, "empty.csl", .{
      .memcpy_params = memcpy_params_1,
      .ctrl_color = channel,
      .payload_size = payload_size,
    });
    @set_tile_code(2, y, "empty.csl", .{
      .memcpy_params = memcpy_params_2,
      .ctrl_color = channel,
      .payload_size = payload_size,
    });
    @set_tile_code(3, y, "recv.csl", .{
      .memcpy_params = memcpy_params_3,
      .ctrl_color = channel,
      .payload_size = payload_size,
    });
  }

  // export symbol names
  @export_name("result", [*]u32, false);
  @export_name("main_fn", fn()void);
}
