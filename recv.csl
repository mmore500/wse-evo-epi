// WSE-2 task ID map
// On WSE-2, data tasks are bound to colors (IDs 0 through 24)
//
//  ID var                ID var  ID var                ID var
//   0                     9      18                    27 reserved (memcpy)
//   1                    10      19                    28 reserved (memcpy)
//   2                    11      20                    29 reserved
//   3                    12      21 reserved (memcpy)  30 reserved (memcpy)
//   4                    13      22 reserved (memcpy)  31 reserved
//   5                    14      23 reserved (memcpy)  32
//   6                    15      24                    33
//   7                    16      25                    34
//   8                    17      26                    35
//   ...
//  40 recv_ctrl_id


param memcpy_params: comptime_struct;

param payload_size: u16;

// Colors
param ctrl_color: color;

const rx_iq: input_queue = @get_input_queue(2);
const tx_oq: output_queue = @get_output_queue(2);
const exit_task_id:   local_task_id = @get_local_task_id(9);
const collect_task_id: local_task_id = @get_local_task_id(10);

// Task IDs
var result = @zeros([payload_size]u32);
const result_ptr: [*]u32 = &result;

const result_dsd = @get_dsd(
  mem1d_dsd,
  .{ .tensor_access = |i|{payload_size} -> result[i] }
);

const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);
const ctrl = @import_module("<control>");

// fabout DSD used to send ctrl wavelet to fabric along tx_color
const tx_ctrl_dsd = @get_dsd(fabout_dsd, .{
  .extent = 1,
  .fabric_color = ctrl_color,
  .control = true,
  .output_queue = tx_oq
});

// main_fn does nothing on recv PEs
fn main_fn() void {

  const in_dsd = @get_dsd(fabin_dsd, .{
    .fabric_color = ctrl_color,
    .extent = payload_size + 1,
    .input_queue = rx_iq
  });
  @mov32(result_dsd, in_dsd, .{
    .async = true,
    // .activate = collect_task_id,
    .on_control = .{ .activate = collect_task_id },
  });
  // @assert(false);
  // sys_mod.unblock_cmd_stream();

}

task collect_task() void {
  const out_dsd = @get_dsd(fabout_dsd, .{
    .fabric_color = ctrl_color,
    .extent = payload_size,
    .output_queue = tx_oq,
  });
  @mov32(out_dsd, result_dsd, .{
    .async = true,
    .activate = exit_task_id,
  });
}

task exit_task() void {

  @mov32(
    tx_ctrl_dsd,
    ctrl.encode_single_payload(ctrl.opcode.SWITCH_ADV, true, {}, 0)
  );
  @mov32(
    tx_ctrl_dsd,
    ctrl.encode_single_payload(ctrl.opcode.SWITCH_ADV, false, {}, 0)
  );
  sys_mod.unblock_cmd_stream();
}

comptime {
  @bind_local_task(exit_task, exit_task_id);
  @bind_local_task(collect_task, collect_task_id);

  @export_symbol(result_ptr, "result");
  @export_symbol(main_fn);

   const broadcast_route = .{
    .rx = .{ WEST, RAMP },
    .tx = .{ RAMP }
  };
  const collect_route = .{ .tx = .{ WEST } };
  @set_local_color_config(
    ctrl_color,
    .{
      .routes = broadcast_route,
      .switches = .{
        .pos1 = collect_route,
        .current_switch_pos = 0,
        .pop_mode = .{ .no_pop = true },
        .ring_mode = false,
      },
    }
  );

}
