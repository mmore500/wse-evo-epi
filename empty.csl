// Every PE needs to import memcpy module otherwise the I/O cannot
// propagate the data to the destination.

param memcpy_params: comptime_struct;

// Colors
param ctrl_color: color;

param payload_size: u16;

const rx_iq: input_queue = @get_input_queue(2);

const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

var result = @zeros([payload_size]u32);
const result_ptr: [*]u32 = &result;

const result_dsd = @get_dsd(
  mem1d_dsd,
  .{ .tensor_access = |i|{payload_size} -> result[i] }
);

// main_fn does nothing on recv PEs
fn main_fn() void {

  const in_dsd = @get_dsd(fabin_dsd, .{
    .fabric_color = ctrl_color,
    .extent = payload_size,
    .input_queue = rx_iq
  });
  @mov32(result_dsd, in_dsd);

  sys_mod.unblock_cmd_stream();
}


comptime {
  @unblock(ctrl_color);

  @export_symbol(main_fn);

  const main_route = .{ .rx = .{ WEST }, .tx = .{ EAST, RAMP } };
  @set_local_color_config(ctrl_color, .{ .routes = main_route });

  @export_symbol(result_ptr, "result");

}
